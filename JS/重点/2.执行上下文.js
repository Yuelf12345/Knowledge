// 执行上下文
function foo() {
    console.log('foo');
}
foo()   // 执行上下文是JavaScript在执行任何代码时为其创造的一个抽象概念，它包含了变量对象、作用域链、以及this值等信息，用来描述当前代码的执行环境
/**
 * 根据类型，执行上下文分为三种：
    全局执行上下文：程序开始执行时创建，只有一个全局执行上下文，它包含所有全局变量和函数声明。
    函数执行上下文：每次调用函数时都会创建一个新的函数执行上下文。
    Eval函数执行上下文：由 eval() 函数动态执行代码时创建，现代实践中通常不推荐使用 eval() 函数，所以此处讨论较少。
 */

/**
 * 每个执行上下文都经历了三个阶段：
 *  1. 创建阶段：创建函数执行上下文，创建时会为其创建一个执行环境，即执行上下文的变量对象，该变量对象包含函数的局部变量和参数变量。
 *  2. 执行阶段：函数执行阶段，执行函数时，会为函数的局部变量和参数变量分配内存空间，然后开始执行函数内部的代码。
 *  3. 回收阶段：函数执行完毕后，会将函数的返回值返回给调用该函数的代码，然后销毁函数执行上下文。
 */


// 执行栈
/**
 *  执行栈是一种数据结构，用于存储和管理当前正在执行的函数调用信息。
    当 JavaScript 代码开始执行时，全局执行上下文首先被压入执行栈。
    每当遇到函数调用时，一个新的执行上下文会被创建并压入栈顶，此时控制权转移至该函数内部，函数开始执行。
    函数执行完毕后，其对应的执行上下文会从栈顶弹出，控制权返回至上一层执行上下文，继续执行后续代码。
    如果函数内部再调用其他函数，则新的执行上下文又会被压入栈顶，形成一种“后进先出”（Last In, First Out, LIFO）的数据结构
 */